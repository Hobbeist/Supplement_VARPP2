* How to retrieve the HPO term related seed gene list
In order to perform the HPO term specific classification task, we need to subset our pathogenic variant file to only contain variants
associated with phenotype related genes.  
Hence, we use the [[http://phenolyzer.wglab.org/][phenolyzer]] command line tool to retrieve the list og genes associated with the HPO terms. In principle, any other tool can be used to
do this, and one could even extract a list of genes from https://hpo.jax.org/ and subset the pathogenic variant file based on these.

We used phenolyzer to be in line with what was done in our previous publication, introducing VARPP.

Just as in the VARPP 1.0 publication, the phenolyzer settings were: 
#+BEGIN_SRC 
-p -ph -logistic -addon B_DISGENET_GENE_DISEASE_SCORE,DB_GAD_GENE_DISEASE_SCORE 
-addon_weight 0.25, 
#+END_SRC
and only the genes with a known disease association were taken forward (seed genes in phenolyzer).

** Download ~phenolyzer~
#+BEGIN_SRC sh
FILE=phenolyzer
if [ -d "$FILE" ]; then
echo "$FILE already downloaded"
else
git clone https://github.com/WGLab/phenolyzer
fi
#+END_SRC

** Retrieve gene list for HPO terms
#+BEGIN_SRC sh
# Entering the phenolyzer directory
cd ../phenolyzer
# Creating an output file directory
mkdir -p HPO_genes
mkdir -p HPO_genes/out


# Variable to hold all HPO terms
filename=../hpo-obo/selected_hpo_terms.txt
all_hpo=`cat $filename`

for i in $all_hpo;
do
    echo $i
    # Run phenolyzer
    perl disease_annotation.pl $i -p -ph -logistic -addon DB_DISGENET_GENE_DISEASE_SCORE,DB_GAD_GENE_DISEASE_SCORE -addon_weight 0.25 -out HPO_genes/out_$i

done

# Create a directory for the HPO seed genes
mkdir -p ../seed_genes

# Move the seed genes for all HPO terms in to the newly created folder
cp ../phenolyzer/HPO_genes/*seed_gene_list ../seed_genes/

#+END_SRC

** Rename all the results files

The phenolyzer results all have that annoying "out" at the beginning and the ".seed_gene_list" at
the end. We use R to rename all the files to only be the HPO identifier.
#+BEGIN_SRC R
library(stringr)
setwd("../seed_genes")

# list all files and save them in a vector
all_files    <- list.files()

# Split the filenames the first time to remove the "out_" at the beginning
filenames_1  <- unlist(lapply(all_files, function(x) str_split(x, "_")[[1]][2]))

# Final split, to remove the ".seed**" at the end
filename_new <- unlist(lapply(filenames_1, function(x) str_split(x,".seed")[[1]][1]))

# Copy the content from the old files to the new files
file.copy(from = all_files, to = filename_new)

# Remove the old files
file.remove(all_files)

#+END_SRC
** Remove HPO terms with < 25 genes
Because we need a sufficiently large training data set, with enough true cases,
we need to filter out those HPO terms, that do not have enough genes associated with it.
We use the same number here as in the VARPP publication: < 25 genes

#+BEGIN_SRC R
seed.genes <- list.files(path="../seed_genes/")
              
## character of seed.gene is empty
vp.phenolyzer <- list()

vp.phenolyzer <- lapply(seed.genes, FUN=function(x) read.table(paste0("../seed_genes/",x), header=TRUE, stringsAsFactors = FALSE))

# Here we name the list with the HPO name
names(vp.phenolyzer) <- gsub(".*//(.*)/.*", "\\1", seed.genes)

# Restrict the list to only those terms that have at least 25 genes associated
vp.phenolyzer <- vp.phenolyzer[sapply(vp.phenolyzer, FUN=function(x) nrow(x) >= 25)]

# hpo terms to keep
hpo_keeper <- names(vp.phenolyzer)

# Specify the HPO terms to delete
hpo_to_remove <- setdiff(seed.genes, hpo_keeper)

setwd("../seed_genes")
sapply(hpo_to_remove, unlink)
#+END_SRC

* Example: Prepare data for VARPP with one HPO term

#+BEGIN_SRC R

library(tidyverse)
library(varppRuleFit)

# Define HPO term
hpo <- "HP:0000002"

# Read in the pathogenic variant file we have created 
patho <- read_csv(pathogenic_variant_file)

# Read the benign variants
benign <- read_csv(benign_variant_file)

genes <- read_delim(paste0("seed_genes/",hpo), delim="\t")

# Get the gene names
hpo_gene_names <- genes$Gene

# Filter the genes that we got from phenolyzer
patho %>%
      filter(Gene %in% hpo_gene_names) %>%
      select(-c(CADD_raw_rankscore)) %>%
      rename(CADD_raw_rankscore = CADD_PHRED_SCORE) -> varpp_patho

varpp_patho <- varpp_patho[,c(1,2,4,3,7:length(names(varpp_patho)))]


# Filter out the benign genes that are in the pathogenic gene list
benign %>%
    filter(!Gene %in% intersect(benign$Gene, patho$Gene)) %>%
    select(-c(CADD_raw_rankscore)) %>%
    rename(CADD_raw_rankscore = CADD_PHRED_SCORE) -> varpp_benign
varpp_benign <- varpp_benign[,c(1,2,4,3,7:length(names(varpp_benign)))]

# Create the input data for varppRuleFit
varpp_data <- list(dat=data.frame(rbind(varpp_patho, varpp_benign)), disease_variants=data.frame(varpp_patho), benign_variants=data.frame(varpp_benign))
#+END_SRC
